signal k_ip2 : std_logic_vector(N-1 downto 0);
signal k_ip1 : std_logic_vector(N-1 downto 0);
signal k_i : std_logic_vector(N-1 downto 0);
signal calc : std_logic_vector(N-1 downto 0);
signal shift_3 : std_logic_vector(2 downto 0);			-- pour decalage circulaire de 3 bits
signal shift_4 : std_logic_vector(3 downto 0);			-- pour decalage circulaire de 4 bits
signal zero : std_logic_vector(N-2 downto 0) := (others => '0');
signal un : std_logic_vector(N-3 downto 0) := (others => '1');

begin

ki <= k_i;
shift_3 <= k_ip2(2 downto 0);
shift_4 <= k_ip2(3 downto 0);
calc <= k_i xor (shift_3 & k_ip2(N-1 downto 3)) xor (shift_4 & k_ip2(N-1 downto 4)) xor ((zero & z_j_i) xor (un & "00"));	--calcul de la cle de ronde

process(load_key, next_key, clock)
begin
	if (clock'event and clock = '1') then
		if (reset = '1') then
			k_i <= (others => '0');
			k_ip1 <= (others => '0');
			k_ip2 <= (others => '0');
		elsif (load_key = '1') then			--chargement de la cle
			k_ip2 <= key(NM-1 downto (2*N));
			k_ip1 <= key((2*N)-1 downto N);
			k_i <= key(N-1 downto 0);
		elsif (next_key = '1') then			--decalage des cle de ronde
			k_i <= k_ip1;
			k_ip1 <= k_ip2;
			k_ip2 <= calc;
		end if;
	end if;
end process;

